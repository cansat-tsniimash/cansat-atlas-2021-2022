
interceptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c70  08002c70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c70  08002c70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c70  08002c70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002c84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002c84  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001953  00000000  00000000  000296d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e46  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b3f  00000000  00000000  00042ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ed9  00000000  00000000  0004cb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d8  00000000  00000000  000d1a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bfc 	.word	0x08002bfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002bfc 	.word	0x08002bfc

0800014c <app_main>:
#pragma pack(pop)



int app_main()
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b0a6      	sub	sp, #152	; 0x98
 8000150:	af00      	add	r7, sp, #0
	//создаем структуру пакетов
	packet_da_type_1_t packet_da_type_1 = {0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0};
 8000152:	4b53      	ldr	r3, [pc, #332]	; (80002a0 <app_main+0x154>)
 8000154:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000158:	461d      	mov	r5, r3
 800015a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800015c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800015e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	packet_da_type_2_t packet_da_type_2 = {0, 2, 0, 4, 0, 6, 0, 8, 0};
 8000166:	4b4f      	ldr	r3, [pc, #316]	; (80002a4 <app_main+0x158>)
 8000168:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800016c:	461d      	mov	r5, r3
 800016e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000172:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000176:	6020      	str	r0, [r4, #0]
 8000178:	3404      	adds	r4, #4
 800017a:	7021      	strb	r1, [r4, #0]

	//поднимаем флаги для определения пакетов
	packet_da_type_1.flag = 0xfa;
 800017c:	23fa      	movs	r3, #250	; 0xfa
 800017e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	packet_da_type_2.flag = 0xfb;
 8000182:	23fb      	movs	r3, #251	; 0xfb
 8000184:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_api_config.hspi = &hspi1;
 8000188:	4b47      	ldr	r3, [pc, #284]	; (80002a8 <app_main+0x15c>)
 800018a:	653b      	str	r3, [r7, #80]	; 0x50
	nrf24_api_config.ce_port = GPIOA;
 800018c:	4b47      	ldr	r3, [pc, #284]	; (80002ac <app_main+0x160>)
 800018e:	657b      	str	r3, [r7, #84]	; 0x54
	nrf24_api_config.ce_pin = GPIO_PIN_10;
 8000190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000194:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	nrf24_api_config.cs_pin = GPIO_PIN_15;
 8000198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800019c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	nrf24_api_config.cs_port = GPIOC;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <app_main+0x164>)
 80001a2:	65fb      	str	r3, [r7, #92]	; 0x5c

	nrf24_mode_power_down(&nrf24_api_config);
 80001a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fbff 	bl	80029ac <nrf24_mode_power_down>

	// Настройки радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_2000_KBIT;
 80001ae:	2302      	movs	r3, #2
 80001b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	nrf24_rf_config.rf_channel = 25;
 80001b4:	2319      	movs	r3, #25
 80001b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_0_DBM;
 80001ba:	2303      	movs	r3, #3
 80001bc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 80001c0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80001c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001c8:	4611      	mov	r1, r2
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 fa26 	bl	800261c <nrf24_setup_rf>

	// Настроили протокол
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 80001d0:	2303      	movs	r3, #3
 80001d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	nrf24_protocol_config.auto_retransmit_count = 15;
 80001d6:	230f      	movs	r3, #15
 80001d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	nrf24_protocol_config.auto_retransmit_delay = 15;
 80001dc:	230f      	movs	r3, #15
 80001de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	nrf24_protocol_config.en_ack_payload = true;
 80001e8:	2301      	movs	r3, #1
 80001ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	nrf24_protocol_config.en_dyn_ack = true;
 80001ee:	2301      	movs	r3, #1
 80001f0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	nrf24_protocol_config.en_dyn_payload_size = true;
 80001f4:	2301      	movs	r3, #1
 80001f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 80001fa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80001fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000202:	4611      	mov	r1, r2
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fa6b 	bl	80026e0 <nrf24_setup_protocol>

	//настройка пайпа(штука , чтобы принимать)
	nrf24_pipe_config_t pipe_config;
	pipe_config.address = 0xafafafaf01;
 800020a:	4a2a      	ldr	r2, [pc, #168]	; (80002b4 <app_main+0x168>)
 800020c:	f04f 03af 	mov.w	r3, #175	; 0xaf
 8000210:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	pipe_config.enable_auto_ack = true;
 8000214:	2301      	movs	r3, #1
 8000216:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pipe_config.payload_size = -1;
 800021a:	23ff      	movs	r3, #255	; 0xff
 800021c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 8000220:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000224:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fadc 	bl	80027e8 <nrf24_pipe_rx_start>

	nrf24_mode_standby(&nrf24_api_config);
 8000230:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fbd7 	bl	80029e8 <nrf24_mode_standby>

	uint8_t rx_buffer[32];

	nrf24_fifo_status_t rx_status = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
    nrf24_fifo_status_t tx_status = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	71bb      	strb	r3, [r7, #6]
	nrf24_mode_rx(&nrf24_api_config);
 8000242:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fbf0 	bl	8002a2c <nrf24_mode_rx>
	while(true)
	{
		nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 800024c:	1dba      	adds	r2, r7, #6
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fc0b 	bl	8002a70 <nrf24_fifo_status>

		if (rx_status != NRF24_FIFO_EMPTY)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d007      	beq.n	8000270 <app_main+0x124>
		{
			nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 8000260:	f107 0108 	add.w	r1, r7, #8
 8000264:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000268:	2220      	movs	r2, #32
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fc40 	bl	8002af0 <nrf24_fifo_read>

        if (tx_status != NRF24_FIFO_EMPTY)
        {
    	    //nrf24_fifo_flush_tx(&nrf24_api_config);
        }
        nrf24_fifo_write_ack_pld(&nrf24_api_config, 0,(uint8_t *)&packet_da_type_1, sizeof(packet_da_type_1));
 8000270:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000274:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000278:	231c      	movs	r3, #28
 800027a:	2100      	movs	r1, #0
 800027c:	f002 fc55 	bl	8002b2a <nrf24_fifo_write_ack_pld>
        nrf24_fifo_write_ack_pld(&nrf24_api_config, 0,(uint8_t *)&packet_da_type_2, sizeof(packet_da_type_2));
 8000280:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000284:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000288:	2315      	movs	r3, #21
 800028a:	2100      	movs	r1, #0
 800028c:	f002 fc4d 	bl	8002b2a <nrf24_fifo_write_ack_pld>

        //опускаем флаги
        nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_RX_DR | NRF24_IRQ_TX_DR | NRF24_IRQ_MAX_RT);
 8000290:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000294:	2107      	movs	r1, #7
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fc6c 	bl	8002b74 <nrf24_irq_clear>
		nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 800029c:	e7d6      	b.n	800024c <app_main+0x100>
 800029e:	bf00      	nop
 80002a0:	08002c14 	.word	0x08002c14
 80002a4:	08002c30 	.word	0x08002c30
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40011000 	.word	0x40011000
 80002b4:	afafaf01 	.word	0xafafaf01

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 fae6 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f80b 	bl	80002da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f8e4 	bl	8000490 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002c8:	f000 f84c 	bl	8000364 <MX_SPI1_Init>
  MX_SPI2_Init();
 80002cc:	f000 f880 	bl	80003d0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80002d0:	f000 f8b4 	bl	800043c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 80002d4:	f7ff ff3a 	bl	800014c <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <main+0x20>

080002da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b090      	sub	sp, #64	; 0x40
 80002de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	2228      	movs	r2, #40	; 0x28
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f002 fc7f 	bl	8002bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000304:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000318:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fdb8 	bl	8000e98 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800032e:	f000 f94f 	bl	80005d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2102      	movs	r1, #2
 800034c:	4618      	mov	r0, r3
 800034e:	f001 f823 	bl	8001398 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000358:	f000 f93a 	bl	80005d0 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3740      	adds	r7, #64	; 0x40
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_SPI1_Init+0x64>)
 800036a:	4a18      	ldr	r2, [pc, #96]	; (80003cc <MX_SPI1_Init+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800036e:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000394:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000398:	2230      	movs	r2, #48	; 0x30
 800039a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003b0:	220a      	movs	r2, #10
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003b6:	f001 f989 	bl	80016cc <HAL_SPI_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003c0:	f000 f906 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000c4 	.word	0x200000c4
 80003cc:	40013000 	.word	0x40013000

080003d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_SPI2_Init+0x64>)
 80003d6:	4a18      	ldr	r2, [pc, #96]	; (8000438 <MX_SPI2_Init+0x68>)
 80003d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_SPI2_Init+0x64>)
 80003dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_SPI2_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_SPI2_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_SPI2_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_SPI2_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_SPI2_Init+0x64>)
 80003fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000400:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_SPI2_Init+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <MX_SPI2_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_SPI2_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <MX_SPI2_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_SPI2_Init+0x64>)
 800041c:	220a      	movs	r2, #10
 800041e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000420:	4804      	ldr	r0, [pc, #16]	; (8000434 <MX_SPI2_Init+0x64>)
 8000422:	f001 f953 	bl	80016cc <HAL_SPI_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800042c:	f000 f8d0 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000028 	.word	0x20000028
 8000438:	40003800 	.word	0x40003800

0800043c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000442:	4a12      	ldr	r2, [pc, #72]	; (800048c <MX_USART3_UART_Init+0x50>)
 8000444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800044c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000472:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_USART3_UART_Init+0x4c>)
 8000474:	f001 fe96 	bl	80021a4 <HAL_UART_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800047e:	f000 f8a7 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000080 	.word	0x20000080
 800048c:	40004800 	.word	0x40004800

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b46      	ldr	r3, [pc, #280]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a45      	ldr	r2, [pc, #276]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b43      	ldr	r3, [pc, #268]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004bc:	4b40      	ldr	r3, [pc, #256]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a3f      	ldr	r2, [pc, #252]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0320 	and.w	r3, r3, #32
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b3a      	ldr	r3, [pc, #232]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a39      	ldr	r2, [pc, #228]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b37      	ldr	r3, [pc, #220]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ec:	4b34      	ldr	r3, [pc, #208]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a33      	ldr	r2, [pc, #204]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004f2:	f043 0308 	orr.w	r3, r3, #8
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b31      	ldr	r3, [pc, #196]	; (80005c0 <MX_GPIO_Init+0x130>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0308 	and.w	r3, r3, #8
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_BME280_Pin|CS_LSM6DS3_Pin|CS_NRF24L01_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800050a:	482e      	ldr	r0, [pc, #184]	; (80005c4 <MX_GPIO_Init+0x134>)
 800050c:	f000 fcac 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|CS_SD_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f241 0102 	movw	r1, #4098	; 0x1002
 8000516:	482c      	ldr	r0, [pc, #176]	; (80005c8 <MX_GPIO_Init+0x138>)
 8000518:	f000 fca6 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_NRF24L01_GPIO_Port, CE_NRF24L01_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	482a      	ldr	r0, [pc, #168]	; (80005cc <MX_GPIO_Init+0x13c>)
 8000524:	f000 fca0 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_BME280_Pin CS_NRF24L01_Pin */
  GPIO_InitStruct.Pin = CS_BME280_Pin|CS_NRF24L01_Pin;
 8000528:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4820      	ldr	r0, [pc, #128]	; (80005c4 <MX_GPIO_Init+0x134>)
 8000542:	f000 fb0d 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LSM6DS3_Pin */
  GPIO_InitStruct.Pin = CS_LSM6DS3_Pin;
 8000546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_LSM6DS3_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4819      	ldr	r0, [pc, #100]	; (80005c4 <MX_GPIO_Init+0x134>)
 8000560:	f000 fafe 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOMA_Pin */
  GPIO_InitStruct.Pin = TOMA_Pin;
 8000564:	2301      	movs	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOMA_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x138>)
 8000578:	f000 faf2 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|CS_SD_Pin;
 800057c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <MX_GPIO_Init+0x138>)
 8000596:	f000 fae3 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_NRF24L01_Pin */
  GPIO_InitStruct.Pin = CE_NRF24L01_Pin;
 800059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_NRF24L01_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_GPIO_Init+0x13c>)
 80005b4:	f000 fad4 	bl	8000b60 <HAL_GPIO_Init>

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40010c00 	.word	0x40010c00
 80005cc:	40010800 	.word	0x40010800

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <HAL_MspInit+0x5c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x5c>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_MspInit+0x60>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_MspInit+0x60>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000

08000640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a37      	ldr	r2, [pc, #220]	; (8000738 <HAL_SPI_MspInit+0xf8>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d130      	bne.n	80006c2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <HAL_SPI_MspInit+0xfc>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a35      	ldr	r2, [pc, #212]	; (800073c <HAL_SPI_MspInit+0xfc>)
 8000666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b33      	ldr	r3, [pc, #204]	; (800073c <HAL_SPI_MspInit+0xfc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b30      	ldr	r3, [pc, #192]	; (800073c <HAL_SPI_MspInit+0xfc>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a2f      	ldr	r2, [pc, #188]	; (800073c <HAL_SPI_MspInit+0xfc>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <HAL_SPI_MspInit+0xfc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4619      	mov	r1, r3
 80006a2:	4827      	ldr	r0, [pc, #156]	; (8000740 <HAL_SPI_MspInit+0x100>)
 80006a4:	f000 fa5c 	bl	8000b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4619      	mov	r1, r3
 80006ba:	4821      	ldr	r0, [pc, #132]	; (8000740 <HAL_SPI_MspInit+0x100>)
 80006bc:	f000 fa50 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006c0:	e036      	b.n	8000730 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <HAL_SPI_MspInit+0x104>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d131      	bne.n	8000730 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <HAL_SPI_MspInit+0xfc>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <HAL_SPI_MspInit+0xfc>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	61d3      	str	r3, [r2, #28]
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <HAL_SPI_MspInit+0xfc>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_SPI_MspInit+0xfc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <HAL_SPI_MspInit+0xfc>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_SPI_MspInit+0xfc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80006fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	4619      	mov	r1, r3
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_SPI_MspInit+0x108>)
 8000712:	f000 fa25 	bl	8000b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	4619      	mov	r1, r3
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_SPI_MspInit+0x108>)
 800072c:	f000 fa18 	bl	8000b60 <HAL_GPIO_Init>
}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013000 	.word	0x40013000
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800
 8000744:	40003800 	.word	0x40003800
 8000748:	40010c00 	.word	0x40010c00

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d131      	bne.n	80007d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_UART_MspInit+0x90>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <HAL_UART_MspInit+0x90>)
 8000772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_UART_MspInit+0x90>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_UART_MspInit+0x90>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <HAL_UART_MspInit+0x90>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_UART_MspInit+0x90>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <HAL_UART_MspInit+0x94>)
 80007b2:	f000 f9d5 	bl	8000b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_UART_MspInit+0x94>)
 80007cc:	f000 f9c8 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004800 	.word	0x40004800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082a:	f000 f875 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}

08000832 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
	...

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ffe4 	bl	8000832 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 f99b 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fd23 	bl	80002b8 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800087c:	08002c78 	.word	0x08002c78
  ldr r2, =_sbss
 8000880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000884:	20000120 	.word	0x20000120

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f92b 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe98 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f935 	bl	8000b46 <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f90b 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000008 	.word	0x20000008
 8000938:	2000011c 	.word	0x2000011c

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	2000011c 	.word	0x2000011c

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff90 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff49 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff90 	bl	8000a50 <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5f 	bl	80009fc <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b08b      	sub	sp, #44	; 0x2c
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e169      	b.n	8000e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b74:	2201      	movs	r2, #1
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 8158 	bne.w	8000e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4a9a      	ldr	r2, [pc, #616]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d05e      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000b9c:	4a98      	ldr	r2, [pc, #608]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d875      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000ba2:	4a98      	ldr	r2, [pc, #608]	; (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d058      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000ba8:	4a96      	ldr	r2, [pc, #600]	; (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d86f      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bae:	4a96      	ldr	r2, [pc, #600]	; (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d052      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bb4:	4a94      	ldr	r2, [pc, #592]	; (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d869      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bba:	4a94      	ldr	r2, [pc, #592]	; (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d04c      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bc0:	4a92      	ldr	r2, [pc, #584]	; (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d863      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bc6:	4a92      	ldr	r2, [pc, #584]	; (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d046      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a90      	ldr	r2, [pc, #576]	; (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d85d      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d82a      	bhi.n	8000c2c <HAL_GPIO_Init+0xcc>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d859      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bda:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <HAL_GPIO_Init+0x80>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c35 	.word	0x08000c35
 8000be8:	08000c47 	.word	0x08000c47
 8000bec:	08000c89 	.word	0x08000c89
 8000bf0:	08000c8f 	.word	0x08000c8f
 8000bf4:	08000c8f 	.word	0x08000c8f
 8000bf8:	08000c8f 	.word	0x08000c8f
 8000bfc:	08000c8f 	.word	0x08000c8f
 8000c00:	08000c8f 	.word	0x08000c8f
 8000c04:	08000c8f 	.word	0x08000c8f
 8000c08:	08000c8f 	.word	0x08000c8f
 8000c0c:	08000c8f 	.word	0x08000c8f
 8000c10:	08000c8f 	.word	0x08000c8f
 8000c14:	08000c8f 	.word	0x08000c8f
 8000c18:	08000c8f 	.word	0x08000c8f
 8000c1c:	08000c8f 	.word	0x08000c8f
 8000c20:	08000c8f 	.word	0x08000c8f
 8000c24:	08000c3d 	.word	0x08000c3d
 8000c28:	08000c51 	.word	0x08000c51
 8000c2c:	4a79      	ldr	r2, [pc, #484]	; (8000e14 <HAL_GPIO_Init+0x2b4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d013      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c32:	e02c      	b.n	8000c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e029      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	3304      	adds	r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e024      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e01f      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	330c      	adds	r3, #12
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e01a      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c62:	2304      	movs	r3, #4
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e013      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	611a      	str	r2, [r3, #16]
          break;
 8000c7a:	e009      	b.n	8000c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	615a      	str	r2, [r3, #20]
          break;
 8000c86:	e003      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
          break;
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          break;
 8000c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d801      	bhi.n	8000c9a <HAL_GPIO_Init+0x13a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_Init+0x13e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	; 0xff
 8000ca4:	d802      	bhi.n	8000cac <HAL_GPIO_Init+0x14c>
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x152>
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	210f      	movs	r1, #15
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	6a39      	ldr	r1, [r7, #32]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a4c      	ldr	r2, [pc, #304]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cf8:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a40      	ldr	r2, [pc, #256]	; (8000e20 <HAL_GPIO_Init+0x2c0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <HAL_GPIO_Init+0x2c4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	; (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3d      	ldr	r2, [pc, #244]	; (8000e2c <HAL_GPIO_Init+0x2cc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1e0>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4093      	lsls	r3, r2
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d5e:	492f      	ldr	r1, [pc, #188]	; (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	492c      	ldr	r1, [pc, #176]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4928      	ldr	r1, [pc, #160]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4922      	ldr	r1, [pc, #136]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	491e      	ldr	r1, [pc, #120]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	4918      	ldr	r1, [pc, #96]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	608b      	str	r3, [r1, #8]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4914      	ldr	r1, [pc, #80]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d021      	beq.n	8000e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	490e      	ldr	r1, [pc, #56]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	60cb      	str	r3, [r1, #12]
 8000dfc:	e021      	b.n	8000e42 <HAL_GPIO_Init+0x2e2>
 8000dfe:	bf00      	nop
 8000e00:	10320000 	.word	0x10320000
 8000e04:	10310000 	.word	0x10310000
 8000e08:	10220000 	.word	0x10220000
 8000e0c:	10210000 	.word	0x10210000
 8000e10:	10120000 	.word	0x10120000
 8000e14:	10110000 	.word	0x10110000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40011400 	.word	0x40011400
 8000e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_GPIO_Init+0x304>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4909      	ldr	r1, [pc, #36]	; (8000e64 <HAL_GPIO_Init+0x304>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f ae8e 	bne.w	8000b74 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e84:	e003      	b.n	8000e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	041a      	lsls	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	611a      	str	r2, [r3, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e26c      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8087 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4b8f      	ldr	r3, [pc, #572]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
 8000ed0:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d168      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e246      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x76>
 8000f00:	4b80      	ldr	r3, [pc, #512]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e02e      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000f16:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7a      	ldr	r2, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b78      	ldr	r3, [pc, #480]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0xbc>
 8000f3a:	4b72      	ldr	r3, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a71      	ldr	r2, [pc, #452]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a67      	ldr	r2, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fce2 	bl	800093c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fcde 	bl	800093c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1fa      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe4>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcce 	bl	800093c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcca 	bl	800093c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1e6      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x10c>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1ba      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4939      	ldr	r1, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fc83 	bl	800093c <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc7f 	bl	800093c <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e19b      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc62 	bl	800093c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fc5e 	bl	800093c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e17a      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03a      	beq.n	800111c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc42 	bl	800093c <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc3e 	bl	800093c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e15a      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 fad8 	bl	8001690 <RCC_Delay>
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc28 	bl	800093c <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc24 	bl	800093c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d908      	bls.n	8001110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e140      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b9e      	ldr	r3, [pc, #632]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e9      	bne.n	80010f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a6 	beq.w	8001276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b97      	ldr	r3, [pc, #604]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b94      	ldr	r3, [pc, #592]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a93      	ldr	r2, [pc, #588]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b8e      	ldr	r3, [pc, #568]	; (8001390 <HAL_RCC_OscConfig+0x4f8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001162:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <HAL_RCC_OscConfig+0x4f8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a8a      	ldr	r2, [pc, #552]	; (8001390 <HAL_RCC_OscConfig+0x4f8>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116e:	f7ff fbe5 	bl	800093c <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001176:	f7ff fbe1 	bl	800093c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0fd      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4b81      	ldr	r3, [pc, #516]	; (8001390 <HAL_RCC_OscConfig+0x4f8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x312>
 800119c:	4b7b      	ldr	r3, [pc, #492]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a7a      	ldr	r2, [pc, #488]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e02d      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x334>
 80011b2:	4b76      	ldr	r3, [pc, #472]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a75      	ldr	r2, [pc, #468]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a72      	ldr	r2, [pc, #456]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x356>
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a6c      	ldr	r2, [pc, #432]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	4b6a      	ldr	r3, [pc, #424]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a69      	ldr	r2, [pc, #420]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a66      	ldr	r2, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	4b64      	ldr	r3, [pc, #400]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a63      	ldr	r2, [pc, #396]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb95 	bl	800093c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fb91 	bl	800093c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0ab      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x37e>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb7f 	bl	800093c <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fb7b 	bl	800093c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e095      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8081 	beq.w	8001382 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	4b42      	ldr	r3, [pc, #264]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d061      	beq.n	8001350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d146      	bne.n	8001322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_RCC_OscConfig+0x4fc>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb4f 	bl	800093c <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fb4b 	bl	800093c <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e067      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	492d      	ldr	r1, [pc, #180]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a19      	ldr	r1, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	430b      	orrs	r3, r1
 80012ee:	4927      	ldr	r1, [pc, #156]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x4fc>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb1f 	bl	800093c <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb1b 	bl	800093c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e037      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x46a>
 8001320:	e02f      	b.n	8001382 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_RCC_OscConfig+0x4fc>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb08 	bl	800093c <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fb04 	bl	800093c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e020      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x498>
 800134e:	e018      	b.n	8001382 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e013      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x4f4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	42420060 	.word	0x42420060

08001398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0d0      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013ac:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d910      	bls.n	80013dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 0207 	bic.w	r2, r3, #7
 80013c2:	4965      	ldr	r1, [pc, #404]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0b8      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	494d      	ldr	r1, [pc, #308]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d040      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d115      	bne.n	8001476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e07f      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e073      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e06b      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f023 0203 	bic.w	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4936      	ldr	r1, [pc, #216]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff fa58 	bl	800093c <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001490:	f7ff fa54 	bl	800093c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	; 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e053      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 020c 	and.w	r2, r3, #12
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d1eb      	bne.n	8001490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d210      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 0207 	bic.w	r2, r3, #7
 80014ce:	4922      	ldr	r1, [pc, #136]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e032      	b.n	800154e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4916      	ldr	r1, [pc, #88]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001526:	f000 f821 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	490a      	ldr	r1, [pc, #40]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_RCC_ClockConfig+0x1cc>)
 8001540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1d0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f9b6 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40022000 	.word	0x40022000
 800155c:	40021000 	.word	0x40021000
 8001560:	08002c58 	.word	0x08002c58
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b490      	push	{r4, r7}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001574:	1d3c      	adds	r4, r7, #4
 8001576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800157c:	f240 2301 	movw	r3, #513	; 0x201
 8001580:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x40>
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x46>
 80015aa:	e02d      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ae:	623b      	str	r3, [r7, #32]
      break;
 80015b0:	e02d      	b.n	800160e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	0c9b      	lsrs	r3, r3, #18
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015be:	4413      	add	r3, r2
 80015c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	0c5b      	lsrs	r3, r3, #17
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015de:	4413      	add	r3, r2
 80015e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ea:	fb02 f203 	mul.w	r2, r2, r3
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	e004      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	623b      	str	r3, [r7, #32]
      break;
 8001606:	e002      	b.n	800160e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_GetSysClockFreq+0xb8>)
 800160a:	623b      	str	r3, [r7, #32]
      break;
 800160c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800160e:	6a3b      	ldr	r3, [r7, #32]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bc90      	pop	{r4, r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	08002c48 	.word	0x08002c48
 8001620:	40021000 	.word	0x40021000
 8001624:	007a1200 	.word	0x007a1200
 8001628:	003d0900 	.word	0x003d0900

0800162c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_RCC_GetHCLKFreq+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000000 	.word	0x20000000

08001640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001644:	f7ff fff2 	bl	800162c <HAL_RCC_GetHCLKFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	4903      	ldr	r1, [pc, #12]	; (8001664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	08002c68 	.word	0x08002c68

08001668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800166c:	f7ff ffde 	bl	800162c <HAL_RCC_GetHCLKFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0adb      	lsrs	r3, r3, #11
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	4903      	ldr	r1, [pc, #12]	; (800168c <HAL_RCC_GetPCLK2Freq+0x24>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	08002c68 	.word	0x08002c68

08001690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <RCC_Delay+0x34>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <RCC_Delay+0x38>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0a5b      	lsrs	r3, r3, #9
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016ac:	bf00      	nop
  }
  while (Delay --);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	60fa      	str	r2, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f9      	bne.n	80016ac <RCC_Delay+0x1c>
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000000 	.word	0x20000000
 80016c8:	10624dd3 	.word	0x10624dd3

080016cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e076      	b.n	80017cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ee:	d009      	beq.n	8001704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
 80016f6:	e005      	b.n	8001704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7fe ff8e 	bl	8000640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800173a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001788:	ea42 0103 	orr.w	r1, r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	0c1a      	lsrs	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f002 0204 	and.w	r2, r2, #4
 80017aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_SPI_Transmit+0x22>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e126      	b.n	8001a44 <HAL_SPI_Transmit+0x270>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017fe:	f7ff f89d 	bl	800093c <HAL_GetTick>
 8001802:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001814:	2302      	movs	r3, #2
 8001816:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001818:	e10b      	b.n	8001a32 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_SPI_Transmit+0x52>
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	77fb      	strb	r3, [r7, #31]
    goto error;
 800182a:	e102      	b.n	8001a32 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2203      	movs	r2, #3
 8001830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001872:	d10f      	bne.n	8001894 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001882:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001892:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b40      	cmp	r3, #64	; 0x40
 80018a0:	d007      	beq.n	80018b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ba:	d14b      	bne.n	8001954 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <HAL_SPI_Transmit+0xf6>
 80018c4:	8afb      	ldrh	r3, [r7, #22]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d13e      	bne.n	8001948 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	1c9a      	adds	r2, r3, #2
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80018ee:	e02b      	b.n	8001948 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d112      	bne.n	8001924 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	1c9a      	adds	r2, r3, #2
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	86da      	strh	r2, [r3, #54]	; 0x36
 8001922:	e011      	b.n	8001948 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001924:	f7ff f80a 	bl	800093c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d803      	bhi.n	800193c <HAL_SPI_Transmit+0x168>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d102      	bne.n	8001942 <HAL_SPI_Transmit+0x16e>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001946:	e074      	b.n	8001a32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800194c:	b29b      	uxth	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ce      	bne.n	80018f0 <HAL_SPI_Transmit+0x11c>
 8001952:	e04c      	b.n	80019ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_SPI_Transmit+0x18e>
 800195c:	8afb      	ldrh	r3, [r7, #22]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d140      	bne.n	80019e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	330c      	adds	r3, #12
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001988:	e02c      	b.n	80019e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b02      	cmp	r3, #2
 8001996:	d113      	bne.n	80019c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	330c      	adds	r3, #12
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80019be:	e011      	b.n	80019e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019c0:	f7fe ffbc 	bl	800093c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d803      	bhi.n	80019d8 <HAL_SPI_Transmit+0x204>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d102      	bne.n	80019de <HAL_SPI_Transmit+0x20a>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019e2:	e026      	b.n	8001a32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1cd      	bne.n	800198a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fbb8 	bl	8002168 <SPI_EndRxTxTransaction>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2220      	movs	r2, #32
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	77fb      	strb	r3, [r7, #31]
 8001a2e:	e000      	b.n	8001a32 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001a30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a68:	d112      	bne.n	8001a90 <HAL_SPI_Receive+0x44>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10e      	bne.n	8001a90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2204      	movs	r2, #4
 8001a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f8f1 	bl	8001c6e <HAL_SPI_TransmitReceive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	e0ea      	b.n	8001c66 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_SPI_Receive+0x52>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0e3      	b.n	8001c66 <HAL_SPI_Receive+0x21a>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa6:	f7fe ff49 	bl	800093c <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d002      	beq.n	8001abe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001abc:	e0ca      	b.n	8001c54 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_SPI_Receive+0x7e>
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ace:	e0c1      	b.n	8001c54 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b16:	d10f      	bne.n	8001b38 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d007      	beq.n	8001b56 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d162      	bne.n	8001c24 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001b5e:	e02e      	b.n	8001bbe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d115      	bne.n	8001b9a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f103 020c 	add.w	r2, r3, #12
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	7812      	ldrb	r2, [r2, #0]
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b98:	e011      	b.n	8001bbe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b9a:	f7fe fecf 	bl	800093c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d803      	bhi.n	8001bb2 <HAL_SPI_Receive+0x166>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d102      	bne.n	8001bb8 <HAL_SPI_Receive+0x16c>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001bbc:	e04a      	b.n	8001c54 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1cb      	bne.n	8001b60 <HAL_SPI_Receive+0x114>
 8001bc8:	e031      	b.n	8001c2e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d113      	bne.n	8001c00 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	b292      	uxth	r2, r2
 8001be4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	1c9a      	adds	r2, r3, #2
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bfe:	e011      	b.n	8001c24 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c00:	f7fe fe9c 	bl	800093c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d803      	bhi.n	8001c18 <HAL_SPI_Receive+0x1cc>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c16:	d102      	bne.n	8001c1e <HAL_SPI_Receive+0x1d2>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c22:	e017      	b.n	8001c54 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1cd      	bne.n	8001bca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fa46 	bl	80020c4 <SPI_EndRxTransaction>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2220      	movs	r2, #32
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	75fb      	strb	r3, [r7, #23]
 8001c50:	e000      	b.n	8001c54 <HAL_SPI_Receive+0x208>
  }

error :
 8001c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b08c      	sub	sp, #48	; 0x30
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_SPI_TransmitReceive+0x26>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e18a      	b.n	8001faa <HAL_SPI_TransmitReceive+0x33c>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c9c:	f7fe fe4e 	bl	800093c <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d00f      	beq.n	8001cde <HAL_SPI_TransmitReceive+0x70>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cc4:	d107      	bne.n	8001cd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_SPI_TransmitReceive+0x68>
 8001cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d003      	beq.n	8001cde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cdc:	e15b      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_SPI_TransmitReceive+0x82>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_SPI_TransmitReceive+0x82>
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cf6:	e14e      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d003      	beq.n	8001d0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2205      	movs	r2, #5
 8001d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	887a      	ldrh	r2, [r7, #2]
 8001d2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d007      	beq.n	8001d60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d68:	d178      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_SPI_TransmitReceive+0x10a>
 8001d72:	8b7b      	ldrh	r3, [r7, #26]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d166      	bne.n	8001e46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	1c9a      	adds	r2, r3, #2
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d9c:	e053      	b.n	8001e46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d11b      	bne.n	8001de4 <HAL_SPI_TransmitReceive+0x176>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_SPI_TransmitReceive+0x176>
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d113      	bne.n	8001de4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	1c9a      	adds	r2, r3, #2
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d119      	bne.n	8001e26 <HAL_SPI_TransmitReceive+0x1b8>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d014      	beq.n	8001e26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	b292      	uxth	r2, r2
 8001e08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e22:	2301      	movs	r3, #1
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e26:	f7fe fd89 	bl	800093c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d807      	bhi.n	8001e46 <HAL_SPI_TransmitReceive+0x1d8>
 8001e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d003      	beq.n	8001e46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e44:	e0a7      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1a6      	bne.n	8001d9e <HAL_SPI_TransmitReceive+0x130>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1a1      	bne.n	8001d9e <HAL_SPI_TransmitReceive+0x130>
 8001e5a:	e07c      	b.n	8001f56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_SPI_TransmitReceive+0x1fc>
 8001e64:	8b7b      	ldrh	r3, [r7, #26]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d16b      	bne.n	8001f42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	330c      	adds	r3, #12
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e90:	e057      	b.n	8001f42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11c      	bne.n	8001eda <HAL_SPI_TransmitReceive+0x26c>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d017      	beq.n	8001eda <HAL_SPI_TransmitReceive+0x26c>
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d114      	bne.n	8001eda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d119      	bne.n	8001f1c <HAL_SPI_TransmitReceive+0x2ae>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d014      	beq.n	8001f1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f1c:	f7fe fd0e 	bl	800093c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d803      	bhi.n	8001f34 <HAL_SPI_TransmitReceive+0x2c6>
 8001f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d102      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x2cc>
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f40:	e029      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1a2      	bne.n	8001e92 <HAL_SPI_TransmitReceive+0x224>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d19d      	bne.n	8001e92 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f904 	bl	8002168 <SPI_EndRxTxTransaction>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f72:	e010      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	e000      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001f94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3730      	adds	r7, #48	; 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fc4:	f7fe fcba 	bl	800093c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fd4:	f7fe fcb2 	bl	800093c <HAL_GetTick>
 8001fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	0d1b      	lsrs	r3, r3, #20
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fea:	e054      	b.n	8002096 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d050      	beq.n	8002096 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ff4:	f7fe fca2 	bl	800093c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	d902      	bls.n	800200a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13d      	bne.n	8002086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002022:	d111      	bne.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202c:	d004      	beq.n	8002038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d107      	bne.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002050:	d10f      	bne.n	8002072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e017      	b.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3b01      	subs	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4013      	ands	r3, r2
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d19b      	bne.n	8001fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000

080020c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d8:	d111      	bne.n	80020fe <SPI_EndRxTransaction+0x3a>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e2:	d004      	beq.n	80020ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d107      	bne.n	80020fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002106:	d117      	bne.n	8002138 <SPI_EndRxTransaction+0x74>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d112      	bne.n	8002138 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff ff49 	bl	8001fb4 <SPI_WaitFlagStateUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01a      	beq.n	800215e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e013      	b.n	8002160 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ff36 	bl	8001fb4 <SPI_WaitFlagStateUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e000      	b.n	8002160 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff ff18 	bl	8001fb4 <SPI_WaitFlagStateUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e000      	b.n	800219c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e03f      	b.n	8002236 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fabe 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f829 	bl	8002240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800227a:	f023 030c 	bic.w	r3, r3, #12
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	430b      	orrs	r3, r1
 8002286:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <UART_SetConfig+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d103      	bne.n	80022b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022a8:	f7ff f9de 	bl	8001668 <HAL_RCC_GetPCLK2Freq>
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	e002      	b.n	80022b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022b0:	f7ff f9c6 	bl	8001640 <HAL_RCC_GetPCLK1Freq>
 80022b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <UART_SetConfig+0x118>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	0119      	lsls	r1, r3, #4
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <UART_SetConfig+0x118>)
 80022ee:	fba3 0302 	umull	r0, r3, r3, r2
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2064      	movs	r0, #100	; 0x64
 80022f6:	fb00 f303 	mul.w	r3, r0, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	3332      	adds	r3, #50	; 0x32
 8002300:	4a15      	ldr	r2, [pc, #84]	; (8002358 <UART_SetConfig+0x118>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230c:	4419      	add	r1, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009a      	lsls	r2, r3, #2
 8002318:	441a      	add	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fbb2 f2f3 	udiv	r2, r2, r3
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <UART_SetConfig+0x118>)
 8002326:	fba3 0302 	umull	r0, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2064      	movs	r0, #100	; 0x64
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	3332      	adds	r3, #50	; 0x32
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <UART_SetConfig+0x118>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	440a      	add	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40013800 	.word	0x40013800
 8002358:	51eb851f 	.word	0x51eb851f

0800235c <_nrf24_CS>:
#include "../nrf24_defs.h"

extern SPI_HandleTypeDef hspi2;

static void _nrf24_CS(void * intf_ptr, bool mode)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60fb      	str	r3, [r7, #12]
	if (mode)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config->cs_port, api_config->cs_pin,  GPIO_PIN_RESET);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68d8      	ldr	r0, [r3, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8a1b      	ldrh	r3, [r3, #16]
 800237a:	2200      	movs	r2, #0
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fd73 	bl	8000e68 <HAL_GPIO_WritePin>
		HAL_Delay(11);
 8002382:	200b      	movs	r0, #11
 8002384:	f7fe fae4 	bl	8000950 <HAL_Delay>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config->cs_port, api_config->cs_pin,  GPIO_PIN_SET);
		HAL_Delay(100);
	}
}
 8002388:	e00a      	b.n	80023a0 <_nrf24_CS+0x44>
		HAL_GPIO_WritePin(api_config->cs_port, api_config->cs_pin,  GPIO_PIN_SET);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68d8      	ldr	r0, [r3, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8a1b      	ldrh	r3, [r3, #16]
 8002392:	2201      	movs	r2, #1
 8002394:	4619      	mov	r1, r3
 8002396:	f7fe fd67 	bl	8000e68 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800239a:	2064      	movs	r0, #100	; 0x64
 800239c:	f7fe fad8 	bl	8000950 <HAL_Delay>
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <nrf24_read_register>:

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	617b      	str	r3, [r7, #20]

	_nrf24_CS(intf_ptr, true);
 80023bc:	2101      	movs	r1, #1
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ffcc 	bl	800235c <_nrf24_CS>

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	f107 010b 	add.w	r1, r7, #11
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	2201      	movs	r2, #1
 80023dc:	f7ff f9fa 	bl	80017d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	f7ff fb2d 	bl	8001a4c <HAL_SPI_Receive>

	_nrf24_CS(intf_ptr, false);
 80023f2:	2100      	movs	r1, #0
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff ffb1 	bl	800235c <_nrf24_CS>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	460b      	mov	r3, r1
 8002410:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	617b      	str	r3, [r7, #20]
	_nrf24_CS(intf_ptr, true);
 8002416:	2101      	movs	r1, #1
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff ff9f 	bl	800235c <_nrf24_CS>

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	b25b      	sxtb	r3, r3
 8002428:	f043 0320 	orr.w	r3, r3, #32
 800242c:	b25b      	sxtb	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f107 010b 	add.w	r1, r7, #11
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	2201      	movs	r2, #1
 8002440:	f7ff f9c8 	bl	80017d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	f7ff f9bf 	bl	80017d4 <HAL_SPI_Transmit>

	_nrf24_CS(intf_ptr, false);
 8002456:	2100      	movs	r1, #0
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff ff7f 	bl	800235c <_nrf24_CS>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <nrf24_read_rx_payload>:

void nrf24_read_rx_payload(void * intf_ptr, uint8_t * payload_buffer, size_t payload_buffer_size)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	617b      	str	r3, [r7, #20]
	uint8_t command = NRF24_R_RX_PAYLOAD;
 8002476:	2361      	movs	r3, #97	; 0x61
 8002478:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_size = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	74bb      	strb	r3, [r7, #18]
    // Считываем размер данных
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 800247e:	f107 0312 	add.w	r3, r7, #18
 8002482:	4619      	mov	r1, r3
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f849 	bl	800251c <nrf24_get_rx_payload_size>
	// Если размер данных от 1 до 32, то читаем данные
	if (payload_size > 0 || payload_size < 32)
 800248a:	7cbb      	ldrb	r3, [r7, #18]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <nrf24_read_rx_payload+0x30>
 8002490:	7cbb      	ldrb	r3, [r7, #18]
 8002492:	2b1f      	cmp	r3, #31
 8002494:	d821      	bhi.n	80024da <nrf24_read_rx_payload+0x74>
	{
		// Если места на запись меньше, чем у нас есть данных, читем сколько, сколько есть места
		if (payload_size > payload_buffer_size)
 8002496:	7cbb      	ldrb	r3, [r7, #18]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4293      	cmp	r3, r2
 800249e:	d202      	bcs.n	80024a6 <nrf24_read_rx_payload+0x40>
		{
			payload_size = payload_buffer_size;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	74bb      	strb	r3, [r7, #18]
		}
		_nrf24_CS(intf_ptr, true);
 80024a6:	2101      	movs	r1, #1
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff ff57 	bl	800235c <_nrf24_CS>
		// Читаем данные
		HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	f107 0113 	add.w	r1, r7, #19
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	2201      	movs	r2, #1
 80024bc:	f7ff f98a 	bl	80017d4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(api_config->hspi, payload_buffer, payload_size, HAL_MAX_DELAY);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	7cbb      	ldrb	r3, [r7, #18]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	f7ff fabd 	bl	8001a4c <HAL_SPI_Receive>
		_nrf24_CS(intf_ptr, false);
 80024d2:	2100      	movs	r1, #0
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff ff41 	bl	800235c <_nrf24_CS>
	}
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <nrf24_flush_rx>:

	_nrf24_CS(intf_ptr, false);
}

void nrf24_flush_rx(void * intf_ptr)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 80024ee:	23e2      	movs	r3, #226	; 0xe2
 80024f0:	72fb      	strb	r3, [r7, #11]
	_nrf24_CS(intf_ptr, true);
 80024f2:	2101      	movs	r1, #1
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff31 	bl	800235c <_nrf24_CS>
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	f107 010b 	add.w	r1, r7, #11
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	2201      	movs	r2, #1
 8002508:	f7ff f964 	bl	80017d4 <HAL_SPI_Transmit>
	_nrf24_CS(intf_ptr, false);
 800250c:	2100      	movs	r1, #0
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff24 	bl	800235c <_nrf24_CS>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <nrf24_get_rx_payload_size>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	_nrf24_CS(intf_ptr, false);
}

void nrf24_get_rx_payload_size(void * intf_ptr, uint8_t * payload_size)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_R_RX_PL_WID;
 800252a:	2360      	movs	r3, #96	; 0x60
 800252c:	72fb      	strb	r3, [r7, #11]
	_nrf24_CS(intf_ptr, true);
 800252e:	2101      	movs	r1, #1
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff13 	bl	800235c <_nrf24_CS>
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	f107 010b 	add.w	r1, r7, #11
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	2201      	movs	r2, #1
 8002544:	f7ff f946 	bl	80017d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, payload_size, 1, HAL_MAX_DELAY);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	2201      	movs	r2, #1
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	f7ff fa7a 	bl	8001a4c <HAL_SPI_Receive>
	_nrf24_CS(intf_ptr, false);
 8002558:	2100      	movs	r1, #0
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fefe 	bl	800235c <_nrf24_CS>
	// Если размер данных больше 32, то отчищаем rx буфер и зануляем его
    if (*payload_size > 32)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b20      	cmp	r3, #32
 8002566:	d904      	bls.n	8002572 <nrf24_get_rx_payload_size+0x56>
    {
    	nrf24_flush_rx(intf_ptr);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ffba 	bl	80024e2 <nrf24_flush_rx>
    	payload_size = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
    }
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <nrf24_write_ack_payload>:

// Запись пакета для отправки вместе с очередным ACK пакетом
void nrf24_write_ack_payload(void * intf_ptr, const uint8_t * payload, size_t payload_size, uint8_t pipe)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	617b      	str	r3, [r7, #20]
	uint8_t command = (NRF24_W_ACK_PAYLOAD << 3) | (pipe & 0x07);
 800258c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	b25b      	sxtb	r3, r3
 8002596:	f063 0357 	orn	r3, r3, #87	; 0x57
 800259a:	b25b      	sxtb	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	74fb      	strb	r3, [r7, #19]
	_nrf24_CS(intf_ptr, true);
 80025a0:	2101      	movs	r1, #1
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff feda 	bl	800235c <_nrf24_CS>

	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f107 0113 	add.w	r1, r7, #19
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	2201      	movs	r2, #1
 80025b6:	f7ff f90d 	bl	80017d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload, payload_size, HAL_MAX_DELAY);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	f7ff f904 	bl	80017d4 <HAL_SPI_Transmit>

	_nrf24_CS(intf_ptr, false);
 80025cc:	2100      	movs	r1, #0
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fec4 	bl	800235c <_nrf24_CS>
}
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <nrf24_ce_activate>:
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
	_nrf24_CS(intf_ptr, false);
}

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
	if (onoff)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <nrf24_ce_activate+0x28>
	{
		HAL_GPIO_WritePin(api_config->ce_port, api_config->ce_pin,  GPIO_PIN_SET);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6858      	ldr	r0, [r3, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	891b      	ldrh	r3, [r3, #8]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fc33 	bl	8000e68 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config->ce_port, api_config->ce_pin, GPIO_PIN_RESET);
	}
}
 8002602:	e007      	b.n	8002614 <nrf24_ce_activate+0x38>
		HAL_GPIO_WritePin(api_config->ce_port, api_config->ce_pin, GPIO_PIN_RESET);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6858      	ldr	r0, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	891b      	ldrh	r3, [r3, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fc2a 	bl	8000e68 <HAL_GPIO_WritePin>
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 800262a:	f107 020f 	add.w	r2, r7, #15
 800262e:	2301      	movs	r3, #1
 8002630:	2106      	movs	r1, #6
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff feb8 	bl	80023a8 <nrf24_read_register>
	switch (config->data_rate)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d01c      	beq.n	800267a <nrf24_setup_rf+0x5e>
 8002640:	2b02      	cmp	r3, #2
 8002642:	dc25      	bgt.n	8002690 <nrf24_setup_rf+0x74>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <nrf24_setup_rf+0x32>
 8002648:	2b01      	cmp	r3, #1
 800264a:	d00b      	beq.n	8002664 <nrf24_setup_rf+0x48>
 800264c:	e020      	b.n	8002690 <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	b2db      	uxtb	r3, r3
 8002656:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	f023 0308 	bic.w	r3, r3, #8
 800265e:	b2db      	uxtb	r3, r3
 8002660:	73fb      	strb	r3, [r7, #15]
		break;
 8002662:	e015      	b.n	8002690 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	f023 0320 	bic.w	r3, r3, #32
 800266a:	b2db      	uxtb	r3, r3
 800266c:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	f023 0308 	bic.w	r3, r3, #8
 8002674:	b2db      	uxtb	r3, r3
 8002676:	73fb      	strb	r3, [r7, #15]
		break;
 8002678:	e00a      	b.n	8002690 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	f023 0320 	bic.w	r3, r3, #32
 8002680:	b2db      	uxtb	r3, r3
 8002682:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	b2db      	uxtb	r3, r3
 800268c:	73fb      	strb	r3, [r7, #15]
		break;
 800268e:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	f023 0306 	bic.w	r3, r3, #6
 8002696:	b2db      	uxtb	r3, r3
 8002698:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	f003 0306 	and.w	r3, r3, #6
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 80026b4:	f107 020f 	add.w	r2, r7, #15
 80026b8:	2301      	movs	r3, #1
 80026ba:	2106      	movs	r1, #6
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fea0 	bl	8002402 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	789b      	ldrb	r3, [r3, #2]
 80026c6:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 80026c8:	f107 020e 	add.w	r2, r7, #14
 80026cc:	2301      	movs	r3, #1
 80026ce:	2105      	movs	r1, #5
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fe96 	bl	8002402 <nrf24_write_register>
	return 0;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 80026ee:	f107 020f 	add.w	r2, r7, #15
 80026f2:	2301      	movs	r3, #1
 80026f4:	2100      	movs	r1, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fe56 	bl	80023a8 <nrf24_read_register>
    switch (config->crc_size)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d017      	beq.n	8002734 <nrf24_setup_protocol+0x54>
 8002704:	2b02      	cmp	r3, #2
 8002706:	dc20      	bgt.n	800274a <nrf24_setup_protocol+0x6a>
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <nrf24_setup_protocol+0x32>
 800270c:	2b01      	cmp	r3, #1
 800270e:	d006      	beq.n	800271e <nrf24_setup_protocol+0x3e>
 8002710:	e01b      	b.n	800274a <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	f023 0308 	bic.w	r3, r3, #8
 8002718:	b2db      	uxtb	r3, r3
 800271a:	73fb      	strb	r3, [r7, #15]
    	break;
 800271c:	e015      	b.n	800274a <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	b2db      	uxtb	r3, r3
 8002730:	73fb      	strb	r3, [r7, #15]
    	break;
 8002732:	e00a      	b.n	800274a <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	b2db      	uxtb	r3, r3
 800273c:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	b2db      	uxtb	r3, r3
 8002746:	73fb      	strb	r3, [r7, #15]
    	break;
 8002748:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 800274a:	f107 020f 	add.w	r2, r7, #15
 800274e:	2301      	movs	r3, #1
 8002750:	2100      	movs	r1, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fe55 	bl	8002402 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 800275e:	f107 020e 	add.w	r2, r7, #14
 8002762:	2301      	movs	r3, #1
 8002764:	2103      	movs	r1, #3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fe4b 	bl	8002402 <nrf24_write_register>

    uint8_t features = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 8002778:	7b7b      	ldrb	r3, [r7, #13]
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	791b      	ldrb	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	789b      	ldrb	r3, [r3, #2]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 800279c:	7b7b      	ldrb	r3, [r7, #13]
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 80027a6:	f107 020d 	add.w	r2, r7, #13
 80027aa:	2301      	movs	r3, #1
 80027ac:	211d      	movs	r1, #29
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff fe27 	bl	8002402 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0x15);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	799b      	ldrb	r3, [r3, #6]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	b25a      	sxtb	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	795b      	ldrb	r3, [r3, #5]
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f003 0315 	and.w	r3, r3, #21
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	2301      	movs	r3, #1
 80027d6:	2104      	movs	r1, #4
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fe12 	bl	8002402 <nrf24_write_register>
	return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	460b      	mov	r3, r1
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 80027fa:	f107 0216 	add.w	r2, r7, #22
 80027fe:	2301      	movs	r3, #1
 8002800:	2101      	movs	r1, #1
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff fdd0 	bl	80023a8 <nrf24_read_register>
	if (config->enable_auto_ack)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00b      	beq.n	8002828 <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	b25a      	sxtb	r2, r3
 800281a:	7dbb      	ldrb	r3, [r7, #22]
 800281c:	b25b      	sxtb	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	b25b      	sxtb	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	75bb      	strb	r3, [r7, #22]
 8002826:	e00c      	b.n	8002842 <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 8002828:	7afb      	ldrb	r3, [r7, #11]
 800282a:	2201      	movs	r2, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	b25b      	sxtb	r3, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	b25a      	sxtb	r2, r3
 8002836:	7dbb      	ldrb	r3, [r7, #22]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	4013      	ands	r3, r2
 800283c:	b25b      	sxtb	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 8002842:	f107 0216 	add.w	r2, r7, #22
 8002846:	2301      	movs	r3, #1
 8002848:	2101      	movs	r1, #1
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff fdd9 	bl	8002402 <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 8002854:	f107 0215 	add.w	r2, r7, #21
 8002858:	2301      	movs	r3, #1
 800285a:	2102      	movs	r1, #2
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff fda3 	bl	80023a8 <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 8002862:	7afb      	ldrb	r3, [r7, #11]
 8002864:	2201      	movs	r2, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	b25a      	sxtb	r2, r3
 800286c:	7d7b      	ldrb	r3, [r7, #21]
 800286e:	b25b      	sxtb	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b25b      	sxtb	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 8002878:	f107 0215 	add.w	r2, r7, #21
 800287c:	2301      	movs	r3, #1
 800287e:	2102      	movs	r1, #2
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fdbe 	bl	8002402 <nrf24_write_register>

	uint8_t rx_pw = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d851      	bhi.n	8002934 <nrf24_pipe_rx_start+0x14c>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <nrf24_pipe_rx_start+0xb0>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028b1 	.word	0x080028b1
 800289c:	080028c7 	.word	0x080028c7
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028f3 	.word	0x080028f3
 80028a8:	08002909 	.word	0x08002909
 80028ac:	0800291f 	.word	0x0800291f
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address) + 3, 5);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3308      	adds	r3, #8
 80028b4:	1cda      	adds	r2, r3, #3
 80028b6:	2305      	movs	r3, #5
 80028b8:	210a      	movs	r1, #10
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff fda1 	bl	8002402 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 80028c0:	2311      	movs	r3, #17
 80028c2:	75fb      	strb	r3, [r7, #23]
		break;
 80028c4:	e036      	b.n	8002934 <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address) + 3, 5);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3308      	adds	r3, #8
 80028ca:	1cda      	adds	r2, r3, #3
 80028cc:	2305      	movs	r3, #5
 80028ce:	210b      	movs	r1, #11
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff fd96 	bl	8002402 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 80028d6:	2312      	movs	r3, #18
 80028d8:	75fb      	strb	r3, [r7, #23]
		break;
 80028da:	e02b      	b.n	8002934 <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 7), 1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3308      	adds	r3, #8
 80028e0:	1dda      	adds	r2, r3, #7
 80028e2:	2301      	movs	r3, #1
 80028e4:	210c      	movs	r1, #12
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fd8b 	bl	8002402 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 80028ec:	2313      	movs	r3, #19
 80028ee:	75fb      	strb	r3, [r7, #23]
		break;
 80028f0:	e020      	b.n	8002934 <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 7), 1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3308      	adds	r3, #8
 80028f6:	1dda      	adds	r2, r3, #7
 80028f8:	2301      	movs	r3, #1
 80028fa:	210d      	movs	r1, #13
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff fd80 	bl	8002402 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 8002902:	2314      	movs	r3, #20
 8002904:	75fb      	strb	r3, [r7, #23]
		break;
 8002906:	e015      	b.n	8002934 <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 7), 1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3308      	adds	r3, #8
 800290c:	1dda      	adds	r2, r3, #7
 800290e:	2301      	movs	r3, #1
 8002910:	210e      	movs	r1, #14
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff fd75 	bl	8002402 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 8002918:	2315      	movs	r3, #21
 800291a:	75fb      	strb	r3, [r7, #23]
		break;
 800291c:	e00a      	b.n	8002934 <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 7), 1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3308      	adds	r3, #8
 8002922:	1dda      	adds	r2, r3, #7
 8002924:	2301      	movs	r3, #1
 8002926:	210f      	movs	r1, #15
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fd6a 	bl	8002402 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 800292e:	2316      	movs	r3, #22
 8002930:	75fb      	strb	r3, [r7, #23]
		break;
 8002932:	bf00      	nop
	}

	uint8_t dynpd = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 8002938:	f107 0214 	add.w	r2, r7, #20
 800293c:	2301      	movs	r3, #1
 800293e:	211c      	movs	r1, #28
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff fd31 	bl	80023a8 <nrf24_read_register>
	if (config->payload_size >= 0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db15      	blt.n	800297c <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f103 0210 	add.w	r2, r3, #16
 8002956:	7df9      	ldrb	r1, [r7, #23]
 8002958:	2301      	movs	r3, #1
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff fd51 	bl	8002402 <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	2201      	movs	r2, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	b25b      	sxtb	r3, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	b25a      	sxtb	r2, r3
 800296e:	7d3b      	ldrb	r3, [r7, #20]
 8002970:	b25b      	sxtb	r3, r3
 8002972:	4013      	ands	r3, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	753b      	strb	r3, [r7, #20]
 800297a:	e00a      	b.n	8002992 <nrf24_pipe_rx_start+0x1aa>
	}
	else
	{
		dynpd |= (1 << pipe_no);
 800297c:	7afb      	ldrb	r3, [r7, #11]
 800297e:	2201      	movs	r2, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	b25a      	sxtb	r2, r3
 8002986:	7d3b      	ldrb	r3, [r7, #20]
 8002988:	b25b      	sxtb	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b25b      	sxtb	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 8002992:	f107 0214 	add.w	r2, r7, #20
 8002996:	2301      	movs	r3, #1
 8002998:	211c      	movs	r1, #28
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff fd31 	bl	8002402 <nrf24_write_register>

	return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop

080029ac <nrf24_mode_power_down>:
	return 0;
}


int nrf24_mode_power_down(void * intf_ptr)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 80029b8:	f107 020f 	add.w	r2, r7, #15
 80029bc:	2301      	movs	r3, #1
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fcf1 	bl	80023a8 <nrf24_read_register>
	config_reg &= ~NRF24_CONFIG_PWR_UP;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	f023 0302 	bic.w	r3, r3, #2
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 80029d0:	f107 020f 	add.w	r2, r7, #15
 80029d4:	2301      	movs	r3, #1
 80029d6:	2100      	movs	r1, #0
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fd12 	bl	8002402 <nrf24_write_register>
	return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <nrf24_mode_standby>:


int nrf24_mode_standby(void * intf_ptr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 80029f4:	f107 020f 	add.w	r2, r7, #15
 80029f8:	2301      	movs	r3, #1
 80029fa:	2100      	movs	r1, #0
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff fcd3 	bl	80023a8 <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 8002a0c:	f107 020f 	add.w	r2, r7, #15
 8002a10:	2301      	movs	r3, #1
 8002a12:	2100      	movs	r1, #0
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fcf4 	bl	8002402 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fddd 	bl	80025dc <nrf24_ce_activate>
	return 0;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <nrf24_mode_rx>:
	return 0;
}


int nrf24_mode_rx(void * intf_ptr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 8002a38:	f107 020f 	add.w	r2, r7, #15
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	2100      	movs	r1, #0
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fcb1 	bl	80023a8 <nrf24_read_register>
	mode_tx |= NRF24_CONFIG_PRIM_RX;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 8002a50:	f107 020f 	add.w	r2, r7, #15
 8002a54:	2301      	movs	r3, #1
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fcd2 	bl	8002402 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 8002a5e:	2101      	movs	r1, #1
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fdbb 	bl	80025dc <nrf24_ce_activate>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 8002a80:	f107 0217 	add.w	r2, r7, #23
 8002a84:	2301      	movs	r3, #1
 8002a86:	2117      	movs	r1, #23
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff fc8d 	bl	80023a8 <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <nrf24_fifo_read>:


int nrf24_fifo_read(void * intf_ptr, uint8_t * packet_buffer, uint8_t packet_buffer_size)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_size = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 8002b02:	f107 0317 	add.w	r3, r7, #23
 8002b06:	4619      	mov	r1, r3
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff fd07 	bl	800251c <nrf24_get_rx_payload_size>
	if (payload_size > 0)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <nrf24_fifo_read+0x30>
	{
		nrf24_read_rx_payload(intf_ptr, packet_buffer, packet_buffer_size);
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff fca3 	bl	8002466 <nrf24_read_rx_payload>
	}
	return payload_size;
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <nrf24_fifo_write_ack_pld>:
	}
}


int nrf24_fifo_write_ack_pld(void * intf_ptr, uint8_t pipe_no, const uint8_t * packet, uint8_t packet_size)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	461a      	mov	r2, r3
 8002b36:	460b      	mov	r3, r1
 8002b38:	72fb      	strb	r3, [r7, #11]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	72bb      	strb	r3, [r7, #10]
	if (packet_size == 0)
 8002b3e:	7abb      	ldrb	r3, [r7, #10]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <nrf24_fifo_write_ack_pld+0x1e>
	{
		return 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e011      	b.n	8002b6c <nrf24_fifo_write_ack_pld+0x42>
	}
	if (packet_size <= 32)
 8002b48:	7abb      	ldrb	r3, [r7, #10]
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d807      	bhi.n	8002b5e <nrf24_fifo_write_ack_pld+0x34>
	{
		nrf24_write_ack_payload(intf_ptr, packet, packet_size, pipe_no);
 8002b4e:	7aba      	ldrb	r2, [r7, #10]
 8002b50:	7afb      	ldrb	r3, [r7, #11]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fd10 	bl	800257a <nrf24_write_ack_payload>
		return packet_size;
 8002b5a:	7abb      	ldrb	r3, [r7, #10]
 8002b5c:	e006      	b.n	8002b6c <nrf24_fifo_write_ack_pld+0x42>
	}
	else
	{
		nrf24_write_ack_payload(intf_ptr, packet, 32, pipe_no);
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	2220      	movs	r2, #32
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff fd08 	bl	800257a <nrf24_write_ack_payload>
		return 32;
 8002b6a:	2320      	movs	r3, #32
	}
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <nrf24_irq_clear>:
	return 0;
}


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 8002b8c:	f107 020f 	add.w	r2, r7, #15
 8002b90:	2301      	movs	r3, #1
 8002b92:	2107      	movs	r1, #7
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fc34 	bl	8002402 <nrf24_write_register>
	return 0;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	4d0c      	ldr	r5, [pc, #48]	; (8002bdc <__libc_init_array+0x38>)
 8002baa:	4c0d      	ldr	r4, [pc, #52]	; (8002be0 <__libc_init_array+0x3c>)
 8002bac:	1b64      	subs	r4, r4, r5
 8002bae:	10a4      	asrs	r4, r4, #2
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	f000 f822 	bl	8002bfc <_init>
 8002bb8:	2600      	movs	r6, #0
 8002bba:	4d0a      	ldr	r5, [pc, #40]	; (8002be4 <__libc_init_array+0x40>)
 8002bbc:	4c0a      	ldr	r4, [pc, #40]	; (8002be8 <__libc_init_array+0x44>)
 8002bbe:	1b64      	subs	r4, r4, r5
 8002bc0:	10a4      	asrs	r4, r4, #2
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08002c70 	.word	0x08002c70
 8002be0:	08002c70 	.word	0x08002c70
 8002be4:	08002c70 	.word	0x08002c70
 8002be8:	08002c74 	.word	0x08002c74

08002bec <memset>:
 8002bec:	4603      	mov	r3, r0
 8002bee:	4402      	add	r2, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <memset+0xa>
 8002bf4:	4770      	bx	lr
 8002bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfa:	e7f9      	b.n	8002bf0 <memset+0x4>

08002bfc <_init>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr

08002c08 <_fini>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr
